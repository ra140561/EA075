ERROR_NF:  .asciz "END>Character not found! :-("

@THE GENERIC CONVERTER (FINITE CHARACTER SEQUENCE)
   	 @VALUES SET
	 
	 
   	 MOV R8, #0   		 @HOLDS LAST X POSITION TO DISPLAY ON SCREEN (MAX = 39, WITH 3 BY 3 INCREASE)
   	 MOV R9, #0   		 @HOLDS LAST Y POSITION TO DISPLAY ON SCREEN    (MAX = 14)
   	 MOV R7, #0x41   	 @HOLDS THE FIRST CHARACTER TO BE CONVERTED (A EQUALS 0x41)
   	 MOV R6, #1   		 @CONSTANT FOR COMPARISON
   	 MOV R3, #0x21   		 @HOLDS THE OFFSET TO THE REACH THE SPACE CHARACTER
   	 MOV R4, #0x10   		 @HOLDS THE OFFSET TO THE REACH THE Q CHARACTER
   	 

L1:  @CMP R10, #0   		 @CHECKS NUMBER OF CHARACTERS TO CONVERT THE REMAINING ONES
   	 
   	 @ADJUST DISPLAY POSITION ON SCREEN
   	 CMP R8, #40   		 @[0 T0 39] = RANGE OF POSSIBLE COLS. TO WRITE, THE 40th COL. IS A COL. OVERFLOW
   	 MOVEQ R8, #0   	 @CARRIAGE RETURN :-D
   	 ADDEQ R9, R9, #1    @NEXT LINE
   	 
   	 CMP R9, #15   		 @[0 T0 14] = RANGE OF POSSIBLE LINES TO WRITE, THE 15th LINE IS A LINE OVERFLOW
   	 MOVEQ R9, #0   	 @RESTART LINE FROM BEGINNING IF DISPLAY BOX IS FULL


   	 @ENCODING BEGINS HERE
	 MOV R5, #1   		 @OFFSET RESET OF BLUE BUTTON POS. CALCULATED AT POS-1,2
   	 SWI 0x202   		 @ALWAYS CHECKS THE RIGHT BLACK BUTTON
   	 CMP R0, #1
   	 BEQ AtoP   		 @IF R0 == 1 THE RIGHT BUTTON WAS PRESSED, if R0 != 1 THEN QtoZ
   	 
QtoZ:
     SWI 0x203   		 @CHECKS THE BLUE BUTTONS
   	 
   	 @SEARCHES FOR SPACE CHAR
   	 CMP R0, #1024
   	 SUBEQ R2, R7, R3    @CHANGE "A" CHAR TO "SPACE" CHAR
   	 MOVEQ R0, R8   	 @X POSITION
   	 MOVEQ R1, R9   	 @Y POSITION
   	 SWIEQ 0x205   		 @PRINTS THE INTEGER
   	 ADDEQ R8, R8, #2    @UPDATES THE DISPLAY SCREEN PRINTING POSITION
   	 BEQ L1
   	 
   	 ADD R2, R4, R7   	 @R2 := THE "Q" LETTER STARTING POSITION, LATER R2 := R2 + OFFSET
   	 
   	 @SEARCHES FOR "Q" CHAR
   	 CMP R0, #1   		 @IF IS NOT SPACE, SO AFTER SWI(203) R0 IS SET
   	 MOVEQ R0, R8   	 @X POSITION
   	 MOVEQ R1, R9   	 @Y POSITION
   	 SWIEQ 0x205   		 @PRINTS THE INTEGER
   	 ADDEQ R8, R8, #2    @UPDATES THE DISPLAY SCREEN PRINTING POSITION
   	 BEQ L1   			 @"Q" IS FOUND, THEN GOES FOR THE NEXT CHARACTER
    

   		 @HERE IF NEITHER "Q" OR "SPACE" IS THE PRESSED KEY THEN SEARCHES THE NEXT CHARACTER
    POS1:CMP R6, R0, LSR R5    @SHIFTS R0 BY R5 BITS TO THE RIGHT THEN COMPARES TO 1 (R6 = 1)
   		 ADDEQ R2, R2, R5
   		 MOVEQ R0, R8   	 @X POSITION
   		 MOVEQ R1, R9   	 @Y POSITION
   		 SWIEQ 0x205   		 @PRINTS THE INTEGER
   		 ADDEQ R8, R8, #2    @UPDATES THE DISPLAY SCREEN PRINTING POSITION
   		 BEQ L1
   		 
   		 ADD R5, R5, #1   	 @ADJUSTS OFFSET FOR THE NEXT CHAR TO BE TESTED
   		 
   		 CMP R5, #10   		 @CHECK IF REACHED "SPACE" CHAR POSITION ("SPACE" CHAR WAS TESTED ALREADY)
   		 MOVEQ R5, #15   	 @THEN JUMPS TO THE ONLY CHAR POSSIBLE "GREATER" THAN Z, THE "END" CHAR
   		 BEQ TERMINATE_CHAR
   		 
   		 B POS1   			 @GO FOR NEXT
   	 
TERMINATE_CHAR:					@ROUTINE TO TEST THE "END" CHAR
		 CMP R6, R0, LSR R5    @CHECKS THE END CHARACTER
   		 BEQ END_OK
		 @BEQ END_err 		 @IF CHAR NOT FOUND THEN GO TO ERROR ROUTINE
   		 B L1

   	 
AtoP:
     SWI 0x203   		 @CHECKS THE BLUE BUTTONS
   	 
   	 MOV R2, R7   	 @R2 := THE "A" LETTER STARTING POSITION, LATER R2 := R2 + OFFSET
   	 
   	 @SEARCHES FOR "A" CHAR
   	 CMP R0, #1   		 @CHECKS FIRST CHAR
   	 MOVEQ R0, R8   	 @X POSITION
   	 MOVEQ R1, R9   	 @Y POSITION
   	 SWIEQ 0x205   		 @PRINTS THE INTEGER (0X41, OR 65D)
   	 ADDEQ R8, R8, #2    @UPDATES THE DISPLAY SCREEN PRINTING POSITION
   	 BEQ L1   			 @"A" IS FOUND, THEN GOES FOR THE NEXT CHARACTER
    

   		 @HERE IF "A" IS NOT THE PRESSED KEY THEN SEARCHES THE NEXT CHARACTER
    POS2:CMP R6, R0, LSR R5    @SHIFTS R0 BY R5 BITS TO THE RIGHT THEN COMPARES TO 1 (R6 = 1)
   		 ADDEQ R2, R2, R5
   		 MOVEQ R0, R8   	 @X POSITION
   		 MOVEQ R1, R9   	 @Y POSITION
   		 SWIEQ 0x205   		 @PRINTS THE INTEGER
   		 ADDEQ R8, R8, #2    @UPDATES THE DISPLAY SCREEN PRINTING POSITION
   		 BEQ L1
   		 
   		 ADD R5, R5, #1   	 @ADJUSTS OFFSET FOR THE NEXT CHAR TO BE TESTED
   		
		 @FOR SAFETY CHECKS 16th POSITION 		
   		 CMP R5, #16   		 @IF REACHED 16 POSITIONS OF OFFSET THEN CHAR NOT FOUND
   		 @BHS END_err 		 @IF CHAR NOT FOUND THEN GO TO ERROR ROUTINE
		 BHS L1
   		 
   		 B POS2   			 @GO FOR NEXT





@=====================================ENDING SECTION=====================================
END_OK:     B FINISH

   		 @CHAR NOT FOUND, THEN WRITING WARNING MESSAGE
@END_err: 
@		 MOV R0, #6   		 @CENTER OF LINE
@   		 MOV R1, #14   		 @LAST LINE
@   		 LDR R2, =ERROR_NF    @ERROR MESSAGE
@   		 SWI 0x204   		 @DISPLAY MESSAGE
   		 
FINISH:   	 EOR R10, R10, R10
